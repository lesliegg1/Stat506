level = c(rep(0.99, 297)))
cover.frame <- rbind.data.frame(frame.95, frame.99)
cover.frame
ggplot(data=cover.frame, aes(p, coverage)) + geom_point()
require(ggplot2)
ggplot(data=frame.95, aes(p, coverage)) + geom_point() + facet_wrap(~n)
ggplot(data=frame.95, aes(p, coverage)) + geom_line() + facet_wrap(~n)
frame.95 <- cbind.data.frame(p, wald = as.vector(waldc.95),
wilson = as.vector(wc.95), n, level)
head(frame.95)
frame.99 <- cbind.data.frame(p, wald = as.vector(waldc.99),
wilson  = as.vector(wc.99), n,
level   = c(rep(0.99, 297)))
frame.99
head(frame.99)
p        <- rep(seq(0.01, 0.99, by = 0.01), 3)
n        <- c(rep(5, 99), rep(10, 99), rep(20, 99))
level    <- c(rep(0.95, 297))
frame.95 <- cbind.data.frame(p, wald = as.vector(waldc.95),
wilson  = as.vector(wc.95), n, level)
frame.99 <- cbind.data.frame(p, wald = as.vector(waldc.99),
wilson  = as.vector(wc.99), n,
level   = c(rep(0.99, 297)))
cover.frame <- rbind.data.frame(frame.95, frame.99)
ggplot(data=frame.95, aes(p, wald)) +
geom_line() +
geom_line(aes(p, wilson))
facet_wrap(~n) +
ggtitle("95% confidence intervals")
p        <- rep(seq(0.01, 0.99, by = 0.01), 3)
n        <- c(rep(5, 99), rep(10, 99), rep(20, 99))
level    <- c(rep(0.95, 297))
frame.95 <- cbind.data.frame(p, wald = as.vector(waldc.95),
wilson  = as.vector(wc.95), n, level)
frame.99 <- cbind.data.frame(p, wald = as.vector(waldc.99),
wilson  = as.vector(wc.99), n,
level   = c(rep(0.99, 297)))
cover.frame <- rbind.data.frame(frame.95, frame.99)
ggplot(data=frame.95, aes(p, wald)) +
geom_line() +
geom_line(aes(p, wilson)) +
facet_wrap(~n) +
ggtitle("95% confidence intervals")
ggplot(data=frame.95, aes(p, wald)) +
geom_line() +
geom_line(aes(p, wilson, linetype=wilson)) +
facet_wrap(~n) +
ggtitle("95% confidence intervals")
ggplot(data=frame.95, aes(p, wald)) +
geom_line() +
geom_line(aes(p, wilson), linetype="dashed") +
facet_wrap(~n) +
ggtitle("95% confidence intervals")
ggplot(data=frame.99, aes(p, wald)) +
geom_line() +
geom_line(aes(p, wilson), linetype="dashed") +
facet_wrap(~n) +
ggtitle("99% confidence intervals")
ggplot(data=frame.99, aes(p, wald)) +
geom_hline(yintercept=0.99) +
geom_line() +
geom_line(aes(p, wilson), linetype="dashed") +
facet_wrap(~n) +
ggtitle("99% confidence intervals")
ggplot(data=frame.99, aes(p, wald)) +
geom_hline(yintercept=0.99) +
geom_line() +
geom_line(aes(p, wilson), linetype="dotdash") +
facet_wrap(~n) +
ggtitle("99% confidence intervals")
ggplot(data=frame.99, aes(p, wald)) +
geom_hline(yintercept=0.99) +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson)) +
facet_wrap(~n) +
ggtitle("99% confidence intervals")
ggplot(data=frame.99, aes(p, wald)) +
geom_hline(yintercept=0.99, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson)) +
facet_wrap(~n) +
ggtitle("99% confidence intervals")
ggplot(data=frame.95, aes(p, wald)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson)) +
facet_wrap(~n) +
ggtitle("95% confidence intervals")
# function to calculate coverage for a wald interval for diff in means
cover.diff <- function(n1, n2, p1, p2, Nreps, confidence) {
phat1.vec <- rbinom(Nreps, n1, p1) / n1
phat2.vec <- rbinom(Nreps, n2, p2) / n2
se <- sqrt(phat1.vec * (1 - phat1.vec) / n1+phat2.vec * (1 - phat2.vec) / n2)
me <- qnorm((1-confidence)/2) * se
wald.ci.l <- phat1.vec - phat2.vec + me
wald.ci.u <- phat1.vec - phat2.vec - me
cis <- matrix(c(wald.ci.l, wald.ci.u), nrow = Nreps, ncol = 2)
diff <- p1-p2
prop.cover <- sum(ifelse(cis[, 1] < diff & cis[, 2] > diff, 1, 0)) / Nreps
finals <- list("waldcis" = cis, "prop.cover" = prop.cover)
return(finals)
}
wald.diffloop <- function(n, confidence) {
wald.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wald.diffcover[zapsmall(100 * i)] <- cover.diff(i, n, confidence)$prop.cover
}
return(wald.diffcover)
}
# evaluate the function at several sample sizes
walddiffc.95 <- sapply(list(5, 10, 20), wald.diffloop, confidence = 0.95)
walddiffc.99 <- sapply(list(5, 10, 20), wald.diffloop, confidence = 0.99)
# function to calculate coverage for a wald interval for diff in means
cover.diff <- function(p1, p2, confidence = 0.95, n1 = 20, n2 = 20,
Nreps = 10000) {
phat1.vec <- rbinom(Nreps, n1, p1) / n1
phat2.vec <- rbinom(Nreps, n2, p2) / n2
se <- sqrt(phat1.vec * (1 - phat1.vec) / n1+phat2.vec * (1 - phat2.vec) / n2)
me <- qnorm((1-confidence)/2) * se
wald.ci.l <- phat1.vec - phat2.vec + me
wald.ci.u <- phat1.vec - phat2.vec - me
cis <- matrix(c(wald.ci.l, wald.ci.u), nrow = Nreps, ncol = 2)
diff <- p1-p2
prop.cover <- sum(ifelse(cis[, 1] < diff & cis[, 2] > diff, 1, 0)) / Nreps
finals <- list("waldcis" = cis, "prop.cover" = prop.cover)
return(finals)
}
wald.diffloop <- function(p2, confidence) {
wald.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wald.diffcover[zapsmall(100 * i)] <- cover.diff(i, p2, confidence)$prop.cover
}
return(wald.diffcover)
}
walddiffc.95 <- sapply(list(0.1, 0.3, 0.5), wald.diffloop, confidence = 0.95)
walddiffc.95
# function to calculate coverage for a wilson interval for diff in means
coverwilson.diff <- function(p1, p2, confidence = 0.95, n1 = 20, n2 = 20,
Nreps = 10000) {
ptilde1.vec <- (rbinom(Nreps, n1, p1) + 1) / (n1 + 2)
ptilde2.vec <- (rbinom(Nreps, n2, p2) + 1) / (n2 + 2)
se <- sqrt(ptilde1.vec * (1 - ptilde1.vec) / (n1 + 2) +
ptilde2.vec * (1 - ptilde2.vec) / (n2 + 2))
me <- qnorm((1 - confidence)/2) * se
wald.ci.l <- ptilde1.vec - ptilde2.vec + me
wald.ci.u <- ptilde1.vec - ptilde2.vec - me
cis <- matrix(c(wald.ci.l, wald.ci.u), nrow = Nreps, ncol = 2)
diff <- p1-p2
prop.cover <- sum(ifelse(cis[, 1] < diff & cis[, 2] > diff, 1, 0)) / Nreps
finals <-list("waldcis" = cis, "prop.cover" = prop.cover)
return(finals)
}
wilson.diffloop <- function(p2, confidence) {
wilson.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wilson.diffcover[zapsmall(100 * i)] <-
coverwilson.diff(i, p2, confidence)$prop.cover
}
return(wilson.diffcover)
}
wcdiff.95 <- sapply(list(0.1, 0.3, 0.5), wilson.diffloop, confidence = 0.95)
wcdiff.95
p1        <- rep(seq(0.01, 0.99, by = 0.01), 3)
p2        <- c(rep(0.1, 99), rep(0.3, 99), rep(0.5, 99))
level    <- c(rep(0.95, 297))
diffframe.95 <- cbind.data.frame(p1, wald = as.vector(walddiffc.95),
wilson  = as.vector(wcdiff.95), p2, level)
ggplot(data = diffframe.95, aes(p1, wald)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson)) +
facet_wrap(~n) +
ggtitle("Coverage for 95% confidence intervals")
diffframe.95
head(diffframe.95)
ggplot(data = diffframe.95, aes(p1, wald)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p1, wilson)) +
facet_wrap(~p2) +
ggtitle("Coverage for 95% confidence intervals")
p.cycle <- list(seq(0.01, 0.99, by = 0.01))
wald.diffloop <- function(p2) {
sapply(p.cycle, cover.diff, p2 = p2)
}
walddiffc.95 <- sapply(list(0.1, 0.3, 0.5), wald.diffloop, confidence = 0.95)
walddiffc.95 <- sapply(list(0.1, 0.3, 0.5), wald.diffloop)
# function to calculate coverage for a wald interval for diff in means
cover.diff <- function(p1, p2, confidence = 0.95, n1 = 20, n2 = 20,
Nreps = 10000) {
phat1.vec <- rbinom(Nreps, n1, p1) / n1
phat2.vec <- rbinom(Nreps, n2, p2) / n2
se <- sqrt(phat1.vec * (1 - phat1.vec) / n1+phat2.vec * (1 - phat2.vec) / n2)
me <- qnorm((1-confidence)/2) * se
wald.ci.l <- phat1.vec - phat2.vec + me
wald.ci.u <- phat1.vec - phat2.vec - me
cis <- matrix(c(wald.ci.l, wald.ci.u), nrow = Nreps, ncol = 2)
diff <- p1-p2
prop.cover <- sum(ifelse(cis[, 1] < diff & cis[, 2] > diff, 1, 0)) / Nreps
finals <- list("waldcis" = cis, "prop.cover" = prop.cover)
return(finals)
}
p.cycle <- list(seq(0.01, 0.99, by = 0.01))
wald.diffloop <- function(p2) {
sapply(p.cycle, cover.diff, p2 = p2)
}
wald.diffloop(0.3)
wald.diffloop <- function(p2) {
p.cycle <- list(seq(0.01, 0.99, by = 0.01))
sapply(p.cycle, cover.diff, p2 = p2)
}
wald.diffloop(0.3)
p.cycle
sapply(p.cycle, cover.diff, p2 = 0.3)
# function to calculate coverage for a wald interval for diff in means
cover.diff <- function(p1, p2, confidence = 0.95, n1 = 20, n2 = 20,
Nreps = 10000) {
phat1.vec <- rbinom(Nreps, n1, p1) / n1
phat2.vec <- rbinom(Nreps, n2, p2) / n2
se <- sqrt(phat1.vec * (1 - phat1.vec) / n1+phat2.vec * (1 - phat2.vec) / n2)
me <- qnorm((1-confidence)/2) * se
wald.ci.l <- phat1.vec - phat2.vec + me
wald.ci.u <- phat1.vec - phat2.vec - me
cis <- matrix(c(wald.ci.l, wald.ci.u), nrow = Nreps, ncol = 2)
diff <- p1-p2
prop.cover <- sum(ifelse(cis[, 1] < diff & cis[, 2] > diff, 1, 0)) / Nreps
finals <- list("waldcis" = cis, "prop.cover" = prop.cover)
return(finals)
}
sapply(p.cycle, cover.diff, p2 = 0.3)
cover.diff(0.5, 0.3)
# Write a function to loop through lots of p1's
wald.diffloop <- function(p2, confidence) {
wald.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wald.diffcover[zapsmall(100 * i)] <- cover.diff(i, p2, confidence)$prop.cover
}
return(wald.diffcover)
}
# evaluate the function at several p2's
walddiffc.95 <- sapply(list(0.1, 0.3, 0.5), wald.diffloop)
# Write a function to loop through lots of p1's
wald.diffloop <- function(p2, confidence) {
wald.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wald.diffcover[zapsmall(100 * i)] <- cover.diff(i, p2, confidence)$prop.cover
}
return(wald.diffcover)
}
# evaluate the function at several p2's
walddiffc.95 <- sapply(list(0.1, 0.3, 0.5), wald.diffloop, 0.95)
wilson.diffloop <- function(p2, confidence) {
wilson.diffcover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wilson.diffcover[zapsmall(100 * i)] <-
coverwilson.diff(i, p2, confidence)$prop.cover
}
return(wilson.diffcover)
}
# evaluate the function at several p2's
wcdiff.95 <- sapply(list(0.1, 0.3, 0.5), wilson.diffloop, confidence = 0.95)
# organize into dataframe
p1           <- rep(seq(0.01, 0.99, by = 0.01), 3)
p2           <- c(rep(0.1, 99), rep(0.3, 99), rep(0.5, 99))
level        <- c(rep(0.95, 297))
diffframe.95 <- cbind.data.frame(p1, wald = as.vector(walddiffc.95),
wilson  = as.vector(wcdiff.95), p2, level)
ggplot(data = diffframe.95, aes(p1, wald)) +
geom_hline(yintercept = 0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p1, wilson)) +
facet_wrap(~p2) +
ggtitle("Coverage for 95% confidence intervals")
frame <- cbind.data.frame(p, wald95 = as.vector(waldc.95),
wilson95  = as.vector(wc.95), n,
wald99 = as.vector(waldc.99),
wilson99 = as.vector(wc.99))
head(frame)
ggplot(data = frame.95, aes(p, wald95)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson95)) +
facet_wrap(~n) +
ggtitle("Coverage for 95% confidence intervals")
ggplot(data = frame, aes(p, wald95)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson95)) +
facet_wrap(~n) +
ggtitle("Coverage for 95% confidence intervals")
ggplot(data = frame, aes(p, wald99)) +
geom_hline(yintercept=0.99, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson99)) +
facet_wrap(~n) +
ggtitle("Coverage for 99% confidence intervals")
head(frame)
# new code
# write a function to find coverage rates of wald cis
cover      <- function(p, n, confidence = 0.95, Nreps = 10000) {
phat.vec   <- rbinom(Nreps, n , p) / n
me         <- qnorm((1 - confidence) / 2) * sqrt(phat.vec*(1 - phat.vec) / n)
wald.ci.l  <- phat.vec + me
wald.ci.u  <- phat.vec - me
prop.cover <- sum(ifelse(wald.ci.l < p & wald.ci.u > p, 1, 0)) / Nreps
return(prop.cover)
}
cover(0.5, 20)
# new code
# Write a function to loop through lots of p's
wald.loop <- function(n, confidence) {
wald.cover <- c(rep(0, 99))
for (i in seq(0.01, 0.99, by = 0.01)) {
wald.cover[zapsmall(100 * i)] <- cover(i, n, confidence)
}
return(wald.cover)
}
# evaluate the function at several sample sizes
waldc.95 <- sapply(list(5, 10, 20), wald.loop, confidence = 0.95)
waldc.99 <- sapply(list(5, 10, 20), wald.loop, confidence = 0.99)
# new code
# organize coverage rates into a dataframe with sample sizes and p's
p        <- rep(seq(0.01, 0.99, by = 0.01), 3)  # vector of proportions
n        <- c(rep(5, 99), rep(10, 99), rep(20, 99))  # vector of sample sizes
frame <- cbind.data.frame(p, wald95   = as.vector(waldc.95),
wilson95 = as.vector(wc.95), n,
wald99   = as.vector(waldc.99),
wilson99 = as.vector(wc.99))
# make two plots for confidence levels of 0.95 and 0.99
ggplot(data = frame, aes(p, wald95)) +
geom_hline(yintercept=0.95, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson95)) +
facet_wrap(~n) +
ggtitle("Coverage for 95% confidence intervals")
ggplot(data = frame, aes(p, wald99)) +
geom_hline(yintercept=0.99, linetype = "dotted") +
geom_line(linetype = "dashed") +
geom_line(aes(p, wilson99)) +
facet_wrap(~n) +
ggtitle("Coverage for 99% confidence intervals")
?rbinom
?rbern
rbinom(1, 1, 0.6)
rbinom(1, 1, 0.6)
rbinom(1, 1, 0.6)
rbinom(1, 1, 0.6)
rbinom(1, 1, 0.6)
rbinom(1, 1, 0.6)
# new code
n.shots <- rep(0, 1000)
propMade <- rep(0, 1000)
for (i in 1:1000) {
keep.going <- 0
score <- 0
shots <- 0
miss <- 0
prev.miss <- 0
while (keep.going < 2) {
shots <- shots+1
prev.miss <- miss
miss <- rbinom(1, 1, 0.6)
score <- score + ifelse(miss == 1, 0, 1)
keep.going <- prev.miss + miss
}
n.shots[i] <- shots
propMade[i] <- score / shots
}
n.shots
propMade
install.packages("coda")
install.packages("mcmcplots")
require(mcmcplots)
traplot(samples, parms=c("mu.a", "mu.b", "rho"))
require(ggplot2)
require(nlme)
data(Oxboys)
ggplot(Oxboys, aes(age, height))+geom_point()+facet_wrap(~Subject)
require(ggplot2)
require(nlme)
data(Oxboys)
ggplot(Oxboys, aes(age, height))+geom_point()+facet_wrap(~Subject)
# old code
#Random slope and intercept with correlation a priori
setwd("~/Documents/Stat506/Homework/HW7")
cat("
model {
for(i in 1:n){
y[i] ~ dnorm (y.hat[i], tau.y)
y.hat[i] <- B[subject[i], 1] + B[subject[i],2] * x[i]
}
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif (0, 100)
for(j in 1:J){
B[j, 1:2] ~ dmnorm(B.hat[j, ], Tau.B[,])
B.hat[j,1] <- mu.a
B.hat[j,2] <- mu.b
}
mu.a ~ dnorm (0, .0001)
mu.b ~ dnorm (0, .0001)
Tau.B[1:2,1:2] <- inverse(Sigma.B[,])
Sigma.B[1,1] <- pow(sigma.a, 2)
sigma.a ~ dunif (0, 100)
Sigma.B[2,2] <- pow(sigma.b, 2)
sigma.b ~ dunif (0, 100)
Sigma.B[1,2] <- rho*sigma.a*sigma.b
Sigma.B[2,1] <- Sigma.B[1,2]
rho ~ dunif (-1, 1)}", file="CorrSlopInt.jags")
# old code
##jags call
library(R2jags)
require(coda)
set.seed(52)
oxboys.data <-with(Oxboys, list(n=nrow(Oxboys), J=length(unique(Subject)),
subject=as.integer(Subject),
y= height, x=age))
oxboys.init2 <- function (){
list (mu.a=rnorm(1), mu.b=rnorm(1), rho = runif(1, -1, 1),
sigma.y=runif(1), sigma.a=runif(1) )
}
oxboys.param2 <- c ("B", "mu.a", "mu.b", "sigma.y", "sigma.a", "sigma.b", "rho")
warmup <- jags.model("CorrSlopInt.jags", oxboys.data, inits = oxboys.init2(),
n.chains = 4, n.adapt = 1000)
# sampling after completed warmup
samples <- coda.samples(warmup, oxboys.param2, n.iter = 4000)
require(mcmcplots)
traplot(samples, parms=c("mu.a", "mu.b", "rho"))
traplot(samples, parms=c("deviance", "sigma.a", "sigma.b", "sigma.y"))
par(mfrow=c(1,4))
traplot(samples, parms=c("deviance", "sigma.a", "sigma.b", "sigma.y"))
traplot(samples, parms=c("deviance"))
traplot(samples, parms="deviance")
traplot(samples, parms="B")
head(samples)
traplot(samples, parms="B[23,2]")
traplot(samples, parms=c("B[10,1]", "B[10,2]", "B[26,1]", "B[26,2]")
)
str(samples)
samples
summary(samples)
summary(samples)[c(1,10,27,36,53:59),]
summary(samples)[1,]
summary(samples[1,])
summary(samples)
summary(samples)[[1]]
str(summary(samples))
summary(samples)$statistics[c(1,10,27,36,53:59),]
summary(samples)$statistics[c(1,10,27,36,53:58),]
owls <- read.table("http://www.math.montana.edu/~jimrc/classes/stat506/data/Owls.txt", head=T)
owls$cTime <- owls$ArrvTime-24
owls$foodsat <- with(owls, ifelse(FoodTrt=="Satiated",1,0))
owls$sexmale <- with(owls, ifelse(SexParent=="Male",1,0))
require(lme4)
require(splines)
owl.fit3 <- glmer(Ncalls ~ offset(log(BroodSize)) + FoodTrt*SexParent +
SexParent*bs(cTime, df=5) +(1 + cTime|Nest), data=owls,
family=poisson)
cat("
model
{
for(i in 1:n){
y[i] ~ dpois(lambda[i])
log(lambda[i]) <- offset[i]+inprod(b.0[], X.0[i,])+a[nest[i]]+b[nest[i]]*x[i]
}
for(k in 1:K){
b.0[k]~dnorm(0,0.0001)
}
for(j in 1:J) {
a[j] ~ dnorm(0, tau.a)
b[j] ~ dnorm(0, tau.b)
}
tau.a <- pow(sigma.a, -2)
sigma.a~dunif(0,1000)
tau.b <- pow(sigma.b, -2)
sigma.b~dunif(0,1000)
}", file="poisson4.jags")
library(R2jags)
set.seed(52)
owls.data4 <-with(owls,
list(n=nrow(owls), J=length(unique(Nest)), K=14,
nest=as.integer(Nest), y=Ncalls, x=cTime,
offset=log(BroodSize),
X.0=model.matrix(~foodsat*sexmale+sexmale*bs(cTime,5))))
owls.param4 <- c("b.0","a","b", "sigma.a", "sigma.b")
owls.model4 <-  jags(data = owls.data4, parameters.to.save=owls.param4,
model.file = "poisson4.jags", n.chains=4, n.iter=5000)
summary(owls.model4)
warmup.owls <- jags.model("poisson4.jags", owls.data4, n.chains = 4,
n.adapt = 1000)
samples.owls <- coda.samples(warmup.owls, owls.param4, n.iter = 4000)
summary(samples.owls)
summary(samples.owls$statistics[68:70,])
print(xtable(summary(samples.owls$statistics)[68:70,]), table.placement =
getOption("xtable.table.placement", "H"))
summary(samples.owls$statistics)[68:70,]
summary(samples.owls)$statistics[68:70,]
str(samples.owls)
rhat(samples.owls)
gelman.plot(samples.owls)
?gelman.plot
gelman.plot(samples.owls, ask=TRUE)
gelman.diag(samples.owls)
?gelman.diag
summary(gelman.diag(samples.owls))
gelman.diag(samples.owls)
gelman.diag(samples.owls)[,1]
require(mosaic)
favstats(gelman.diag(samples.owls))
str(gelman.diag(samples.owls))
gelman.diag(samples.owls)$psrf
favstats(gelman.diag(samples.owls)$psrf)
install.packages("mi")
